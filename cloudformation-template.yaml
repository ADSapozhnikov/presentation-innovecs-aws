Parameters:
  KeyName:  
    Type: "AWS::EC2::KeyPair::KeyName"

Mappings:
  AwsRegionMap:
    # AMI for Ubuntu 16.04 LTS hvm (20160627)
    us-east-1:
      AmiId: "ami-29f96d3e" # US East (N. Virginia)
   
Resources:
  
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: !Ref "AWS::StackName"
  
  SubnetE: 
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1e"
      CidrBlock: "10.1.4.0/24"
      MapPublicIpOnLaunch: true
      VpcId: !Ref "Vpc"
      Tags:
        - Key: "Name"
          Value: !Ref "AWS::StackName"
    DependsOn:
      - "Vpc"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Ref "AWS::StackName"

  VpcGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref "InternetGateway"
      VpcId: !Ref "Vpc"
    DependsOn:
      - "Vpc"
      - "InternetGateway"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "Vpc"
      Tags:
        - Key: "Name"
          Value: !Ref "AWS::StackName"
    DependsOn:
      - "Vpc"

  Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
      RouteTableId: !Ref "RouteTable"
    DependsOn:
      - "RouteTable"
      - "InternetGateway"

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "RouteTable"
      SubnetId: !Ref "SubnetE"
    DependsOn:
      - "RouteTable"
      - "SubnetE"

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Ref "AWS::StackName"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp" 
          FromPort: 22
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp" 
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "icmp" 
          FromPort: -1
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1" 
      VpcId: !Ref "Vpc"
    DependsOn:
      - "Vpc"

  Ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap ["AwsRegionMap", !Ref "AWS::Region", "AmiId"]
      InstanceType: "t2.nano"
      AvailabilityZone: "us-east-1e"
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: "10"
      SubnetId: !Ref "SubnetE"
      Monitoring: false
      KeyName: !Ref "KeyName"
      SecurityGroupIds:
        - !Ref "SecurityGroup"
      Tags:
        - Key: "Name"
          Value: !Ref "AWS::StackName"
    DependsOn:
      - "SecurityGroup"
      - "SubnetE"

  ElasticIp:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      InstanceId: !Ref "Ec2Instance"
    DependsOn:
      - "Vpc"
      - "Ec2Instance"

# Lambda - Create AMI
#
#  ManagedPolicyLambda:
#    Type: "AWS::IAM::ManagedPolicy"
#    Properties: 
#      Description: "IAM Managed Policy for Lambda function"
#      PolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: "Allow"
#            Action:
#              - "ec2:CreateImage"
#              - "ec2:DescribeInstances"
#            Resource:
#              - "*"
#          - Effect: "Allow"
#            Action:
#              - "logs:CreateLogGroup"
#              - "logs:CreateLogStream"
#              - "logs:PutLogEvents"
#            Resource:
#              - "*"
#
#  IamRoleLambda:
#    Type: "AWS::IAM::Role"
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              Service: "lambda.amazonaws.com"
#            Action: "sts:AssumeRole"
#      ManagedPolicyArns:
#        - !Ref "ManagedPolicyLambda"
#    DependsOn:
#      - "ManagedPolicyLambda"
#        
#  LambdaFunction:
#    Type: "AWS::Lambda::Function"
#    Properties: 
#      Code:
#        ZipFile: 
#          !Sub 
#            - |
#                import boto3
#                import datetime
#                         
#                def lambda_handler(event, context):
#  
#                    AwsSession = boto3.session.Session()
#                    Ec2Client = AwsSession.client('ec2')
#                    InstanceName = "${AWS::StackName}"
#  
#                    InstanceId = "${InstanceId}"
#                    ImageName = InstanceName + "-" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S") + "-Lambda-" + InstanceId + "-" + event['AmiType'] 
#  
#                    CreateImageResponse = Ec2Client.create_image(
#                        DryRun = False,
#                        InstanceId = InstanceId,
#                        Name = ImageName,
#                        Description = "Created by AWS Lambda",
#                        NoReboot = True
#                    )
#  
#                    print(str(CreateImageResponse))
#                    return str(CreateImageResponse)
#
#            - InstanceId: !Ref "Ec2Instance" 
#      Description: !Join [" ", ["Create", !Ref "AWS::StackName", "EC2 instance AMI"]]
#      FunctionName: !Join ["", ["Create", !Ref "AWS::StackName", "Ami"]]
#      Handler: "index.lambda_handler"
#      MemorySize: 128
#      Role: !GetAtt IamRoleLambda.Arn
#      Runtime: "python2.7"
#      Timeout: 10
#    DependsOn:
#      - "IamRoleLambda"
#
#  LambdaPermission:
#    Type: "AWS::Lambda::Permission"
#    Properties: 
#      Action: "lambda:InvokeFunction"
#      FunctionName: !Ref "LambdaFunction"
#      Principal: "events.amazonaws.com"
#      SourceArn: !GetAtt CloudWatchEventsRule1.Arn
#    DependsOn:
#      - "LambdaFunction"
#      - "CloudWatchEventsRule1"
#
#  CloudWatchEventsRule1:
#    Type: "AWS::Events::Rule"
#    Properties: 
#      Description: "Create hourly AMI"
#      ScheduleExpression: "cron(0/3 * * * ? *)"
#      State: "ENABLED"
#      Targets:
#        - Arn: !GetAtt LambdaFunction.Arn
#          Id: "1"
#          Input: "{\"AmiType\" : \"Hourly\"}"
#    DependsOn:
#      - "LambdaFunction"
